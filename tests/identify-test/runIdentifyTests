#!/bin/bash

# ---------------------------------------------------------
#                       PATHS
# ---------------------------------------------------------
RESULT_FILE="../../log/scarefault.log"
MAIN_DIR="../.."
IDENTIFY_TEST_DIR="tests/identify-test"
TEMP_OUT_FILE="/tmp/identifytest-script.log"
TEMP_RESULT_FILE="/tmp/result-compare-identifytest-script.log"

# ---------------------------------------------------------
#                       CONSTANTS
# ---------------------------------------------------------
CASE_TEST_FILE=$1
EXPECT_FILE="${1}.expect"
OUT_FILE="out"
LINES=$(wc -l < "$EXPECT_FILE")
NUMBER_LINES=$((${LINES}))

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
BOLD_RED='\033[1;31m'
BOLD_GREEN='\033[1;32m'
BOLD_YELLOW='\033[1;33m'
BOLD_BLUE='\033[1;34m'
RESET='\033[0;0m'

# ---------------------------------------------------------
#                       FUNCTIONS
# ---------------------------------------------------------
declare -a array_total_results

write_success_message()
{
  echo -e "${iterator}\t[  ${BOLD_GREEN}OK${RESET}  ]" >> out
}

write_fail_message()
{
  echo -e "${iterator}\t[ ${BOLD_RED}FAIL${RESET} ]" >> out
  echo -e "\t\t ${BOLD_YELLOW}Expect:${YELLOW} $expect${RESET}" >> out
  echo -e "\t\t ${BOLD_YELLOW}Result:${YELLOW} $result${RESET}" >> out
}

compare_result_expect()
{
  if [ "$result" = "$expect" ]; then
    write_success_message
    let success=success+1
  else
    write_fail_message
    let fails=fails+1
  fi
}

increase_iterator()
{
  let iterator=iterator+1
}

create_result()
{
  if [ -e $RESULT_FILE ]; then
    rm $RESULT_FILE
  fi

  cd $MAIN_DIR
  ./scarefault < "${IDENTIFY_TEST_DIR}/${CASE_TEST_FILE}" >>$TEMP_OUT_FILE 2>&1
  cd $IDENTIFY_TEST_DIR
}

store_compare_data()
{
  array_total_results[0]=$success
  array_total_results[1]=$fails
  echo "${array_total_results[@]}" > $TEMP_RESULT_FILE
}

compare_line_by_line()
{
  iterator=1
  success=0
  fails=0

  cat $EXPECT_FILE | cut -d' ' -f6- | while read expect; do
    temp=$(sed "${iterator}q;d" $RESULT_FILE)
    result=$(echo -e ${temp} | cut -d' ' -f6-)

    compare_result_expect
    store_compare_data
    increase_iterator
  done
}

print_test_result()
{
  if [ -e out ]; then
    cat out
    rm out
  else
    echo "Unable to access or remove out file..."
  fi

  if [ -e temp ]; then
    rm temp
  fi
}

print_header_message()
{
  echo -e "${GREEN}========================================================="
  echo -e "\t\t${BOLD_GREEN}Tests of Identification"
  echo -e "\t\tTest Case - ${BOLD_BLUE}${CASE_TEST_FILE}${RESET}"
  echo
}

print_summary_message()
{
  echo
  echo -e "${GREEN}========================================================="
  echo -e "Total examples: ${BOLD_GREEN}${NUMBER_LINES}${RESET}"

  read -r -a array_total_results < $TEMP_RESULT_FILE
  TOTAL_SUCCESS=${array_total_results[0]}
  TOTAL_FAILS=${array_total_results[1]}

  if [ $TOTAL_SUCCESS -eq $NUMBER_LINES ]; then
    echo -e "${GREEN}Passed: ${BOLD_GREEN}ALL${RESET}"
  elif [ $TOTAL_SUCCESS -gt $TOTAL_FAILS ]; then
    echo -e "${GREEN}Passed: ${BOLD_GREEN}${TOTAL_SUCCESS}${RESET}"
    echo -e "${RED}Failed: ${BOLD_RED}${TOTAL_FAILS}${RESET}"
  elif [ $TOTAL_SUCCESS -lt $TOTAL_FAILS ]; then
    echo -e "${RED}Failed: ${BOLD_RED}${TOTAL_FAILS}${RESET}"
    echo -e "${GREEN}Passed: ${BOLD_GREEN}${TOTAL_SUCCESS}${RESET}"
  else
    echo -e "${RED}Failed: ${BOLD_RED}ALL${RESET}"
  fi
}

# ---------------------------------------------------------
#                         MAIN
# ---------------------------------------------------------

create_result
compare_line_by_line

print_header_message
print_test_result
print_summary_message
