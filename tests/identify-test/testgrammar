/* This is a example file to test the identification of the grails
 *   programming language.
 */


package br.com.companyx.example

import br.com.companyx.array
import static br.com.companyx.math as Math
import static br.com.companyx.umbrella.*
import br.com.companyx.standard.*

/**
 * This is a class. And this comment is a GroovyDoc!
 *   Do you notice this? Good!
 */
class TypedVariableDeclarationExample {
  short variable
  Short variable
  int variable
  Integer variable
  long variable
  Long variable
  float variable
  Float variable
  double variable
  Double variable
  String variable
  char variable
  Character variable
}

class TypedVariableDeclarationWithModifiersExample {
  public short variable
  protected short variable
  private short variable
  static short variable
  final short variable

  public Short variable
  protected Short variable
  private Short variable
  static Short variable
  final Short variable

  public int variable
  protected int variable
  private int variable
  static int variable
  final int variable

  public Integer variable
  protected Integer variable
  private Integer variable
  static Integer variable
  final Integer variable

  public long variable
  protected long variable
  private long variable
  static long variable
  final long variable

  public Long variable
  protected Long variable
  private Long variable
  static Long variable
  final Long variable

  public float variable
  protected float variable
  private float variable
  static float variable
  final float variable

  public Float variable
  protected Float variable
  private Float variable
  static Float variable
  final Float variable

  public double variable
  protected double variable
  private double variable
  static double variable
  final double variable

  public Double variable
  protected Double variable
  private Double variable
  static Double variable
  final Double variable

  public String variable
  protected String variable
  private String variable
  static String variable
  final String variable

  public char variable
  protected char variable
  private char variable
  static char variable
  final char variable

  public Character variable
  protected Character variable
  private Character variable
  static Character variable
  final Character variable
}

abstract class UntypedVariableDeclarationExample {
  public variable
  protected variable
  private variable
  static variable
  final variable

  def variable

  public def variable
  protected def variable
  private def variable
  static def variable
  final def variable
}

class TypedVariableAssignmentExample implements Interface {
  short variable = 0
  Short variable = 1
  int variable = 10
  Integer variable = 1000
  long variable = 1000000
  Long variable = 10000000000000
  float variable = 10.0
  Float variable = 1000.1234
  double variable = 1234.12345
  Double variable = 1234567.123456789
  String variable = "blablabla blabla bla!"
  char variable = 'a'
  Character variable = '1'
}

class UntypedVariableDeclarationAssignmentExample {
  /* TODO: Não está identificando o operador de subtração ( '-' ) */

  variable = 1 + 1 * 1 / 1
  public variable = 123 * 234 + 543
  protected variable = 123 * 32 && 1234 / 432
  private variable = "strinstringstring" == "stringstring"
  static variable = true && false != false && true
  final variable = 123456789 > 0

  def variable = 0 < 1234567

  def variable = [1, 2, 3, 4, 5, 6]
  def variable = [1.23, 2.34, 5.67, 10.3]
  def variable = ['a', 'b', 'c', 'd', 'e']
  def variable = ["str", "str", "str", "str", "str"]
  def variable = [variable, variable, variable, variable, variable]
  def variable = [object, object, object, object, object, object]
  def variable = [object.attribute, object.attribute, object.attribute]
  def variable = [object.method(), object.method(), object.method()]
  def variable = [object.method(arg, arg), object.method()]

  def variable = [arg: 1, arg: 2, arg: 3]
  def variable = [arg: 1.23, arg: 2.34, arg: 3.56]
  def variable = [arg: 'a', arg: 'b', arg: 'c']
  def variable = [arg: "string", arg: "string", arg: "string"]
  def variable = [arg: variable, arg: variable, arg: variable]
  def variable = [arg: object.attribute, arg: object.attribute]
  def variable = [arg: object.method(), arg: object.method(1, arg)]
  def variable = ["string": 1, "string": 2, "string": 3]
  def variable = ["string": 1.23, "string": 2.34, "string": 4.56]
  def variable = ["string": 'a', "string": 'c', "string": 'b']
  def variable = ["string": "string", "string": "string", "string": "string"]
  def variable = ["string": variable, "string": variable, "string": variable]
  def variable = ["string": object.attribute, "string": object.attribute]
  def variable = ["string": object.method(), "string": object.method(1, arg)]

  public def variable = true || false && false
}

class ConditionalStructureExample extends AbstractClass {

  if( object.method(1.8, 2.2) && object.method(2, 6, 8) ) {
    /* Do Something */
  } else if( object.method("arg", 'arg') || variable ) {
    /* Do Something */
  } else if( variable && object.method(arg, arg, arg) || object.method() && object.method() ) {
    /* Do Something */
  } else {
    /* Do Something */
  }

  if( object.attribute && object.attribute ) {
    /* Do Something */
  } else if( object.attribute || variable ) {
    /* Do Something */
  } else if( variable && object.attribute || object.attribute && object.attribute ) {
    /* Do Something */
  } else {
    /* Do Something */
  }

  if( object.method() && object.method() ) {
    /* Do Something */
  } else if( object.method() || variable ) {
    /* Do Something */
  } else if( variable && object.method() || object.method() && object.method() ) {
    /* Do Something */
  } else {
    /* Do Something */
  }

  if( variable ) {
    /* Do Something */
  } else if( !variable ) {
    /* Do Something */
  } else {
    /* Do Something */
  }

  if( variable && variable ) {
    /* Do Something */
  } else if( variable || variable ) {
    /* Do Something */
  } else if( variable && variable || variable && variable ) {
    /* Do Something */
  } else {
    /* Do Something */
  }

  if( variable == variable ) {
    /* Do Something */
  } else if( variable != variable ) {
    /* Do Something */
  } else if( variable > variable ) {
    /* Do Something */
  } else if( variable < variable ) {
    /* Do Something */
  } else {
    /* Do Something */
  }

  if( 1 ) {
    /* Do Something */
  } else if( 0 ) {
    /* Do Something */
  } else if( 1 + 2 + 8 * 23 / 2 ) {
    /* Do Something */
  } else {
    /* Do Something */
  }

  if( true ) {
    /* Do Something */
  } else if( false ) {
    /* Do Something */
  } else if( true && false ) {
    /* Do Something */
  } else {
    /* Do Something */
  }

  if( true || false ) {
    /* Do Something */
  } else if( "string" == "string" ) {
    /* Do Something */
  } else if( "string" != "string string" ) {
    /* Do Something */
  } else {
    /* Do Something */
  }

  if( 1234 > 432 ) {
    /* Do Something */
  } else if( 543 < 2345 ) {
    /* Do Something */
  } else if( !true ) {
    /* Do Something */
  } else {
    /* Do Something */
  }

  switch( 1 ) {
    case 1:
      /* Do Something */
    case 2:
      /* Do Something */
    case 3:
      /* Do Something */
  }

  switch( 1 ) {
    case 'a':
      /* Do Something */
    case 'b':
      /* Do Something */
    case 'c':
      /* Do Something */
  }
}

class StringExamples {
  var = 'Its a string'
  var = "Its another string!"
  var = '''Its a
           string with
           multilines...'''
  var = """
        This another example
        of a multiline string
        !
        """
}

class LoopingtructureExample {

  for( int i = 0; i > object.attribute; i++ ) {
    /* Do Something */
  }

  for( int i = 0; i > object.method(arg, 6, 10.0, "arg"); i++ ) {
    /* Do Something */
  }

  for( int i = 0; i > object.method(); i++ ) {
    /* Do Something */
  }

  for( int i = 0; i > variable; i++ ) {
    /* Do Something */
  }

  for( int i = 0; i > 100; i++ ) {
    /* Do Something */
  }

  for( int i = 0; i < variable; i++ ) {
  /* Do Something */
  }

  for( int i = 0; i < 100; i++ ) {
    /* Do Something */
  }

  while( true ) {
    /* Do Something */
  }
}

class ObjectDeclarationExample {
  Class object
  def object

  public object
  protected object
  private object
  static object
  final object
}

class ObjectAssignmentExample {
  /* TODO: Atribuição de propriety ainda não está funcionando. */

  def object = new Class()

  public object = new Class(arg, arg)
  protected object = object
  private object = new Class(arg)
  static object = new Class()
  final object = new Class(arg, arg, arg)

  object = new Class(arg, arg, arg)
  object = new Class()
  object = object
}

class ObjectCallExample {
  object.propriety
  object.propriety.propriety
  object.propriety.propriety.propriety

  object.method()
  object.method(1, 2, arg).method()
  object.method("string": 2, obj.method()).method(obj.propriety).method()

  object.propriety.method([1, 2, 3], arg, arg).propriety
  object.method([arg: var, arg: 1], "string").propriety.method()

  object.method(arg1, arg2, 1, 2, 10.525, "string")

  object.method([1, 2, 3], [object, variable], [object.method(), object.attribute])
  object.method([object.method(1, 2), object.method(1, 2, [1, 2, 3])])

  object.method([arg: "string", arg: 2.34], arg, 1)
  object.method([arg: 'a', arg: 100], ["string": variable, "string": object])
  object.method([arg: obj.attribute, arg: obj.method()], arg, 1)
  object.method([arg: obj.method( [1, 2], arg), arg: obj.method( var, obj), arg: obj.method( 1, 2)])

  object.method( arg: 1, arg: "string", arg: 2.34, arg: variable )
  object.method( "string": 1, "string": "string", "string": 2.34, "string": variable )

  method()
  method(1, 2, arg, "string", [arg: 12, arg: var], [1, 2, 3, "string"])
  method(arg: 1, 1, "string": 1)
}

class MethodStmtExample {
  int method() {
    /* Do something */
  }

  Integer method() {
    /* do somthing */
  }

  String method( int param, char param ) {
    /* Do something */
  }

  def method( double param, Double param, String param ) {
    /* Do somthing */
  }
}

class TryCatchExample {
  try {
    /* Do Something */
  } catch( Exception exception ) {
    /* Do Something */
  }

  try {
    /* Do Something */
  } catch( Exception exception ) {
    /* Do Something */
  } catch( Exception exception ) {
    /* Do Something */
  }
}
